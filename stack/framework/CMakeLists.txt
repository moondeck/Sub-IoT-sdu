#[[
Copyright (c) 2015-2021 University of Antwerp, Aloxy NV.

This file is part of Sub-IoT.
See https://github.com/Sub-IoT/Sub-IoT-Stack for further info.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]

#Export the interface of the framework to the rest of the code base
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(inc)

#include the 'binary' platform directory so the 'framework_defs.h' file
#generated by FRAMEWORK_BUILD_SETTINGS file can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#Include framework-specific helper MACRO's
include(${PROJECT_SOURCE_DIR}/cmake/framework_macros.cmake)

#add the hal
ADD_SUBDIRECTORY("hal")

#Add framework options && import them in the framework_defs.h file
#This is NOT done seperately for each component since components can be overridden by a platform
#And these settings should not be
SET(FRAMEWORK_SCHEDULER_MAX_TASKS "41" CACHE STRING "The maximum number of tasks that can be registered with the scheduler")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_SCHEDULER_MAX_TASKS)

SET(FRAMEWORK_SCHEDULER_LP_MODE "0" CACHE STRING "The low power mode to use. Only change this if you know exactly what you are doing")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_SCHEDULER_LP_MODE)

# when the current platform is using jlink we enable logging by default
IF(JLINK_DEVICE)
  SET(FRAMEWORK_LOG_ENABLED "TRUE" CACHE BOOL "Select whether to enable or disable the generation of logs")
ELSE()
  SET(FRAMEWORK_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs")
ENDIF()
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_LOG_ENABLED)

# when the current platform is using jlink we use RTT logging
IF(JLINK_DEVICE)
  SET(FRAMEWORK_LOG_OUTPUT_ON_RTT "TRUE" CACHE BOOL "When enabled logs will be outputted using the Segger RTT interface instead of using the serial console.")
ELSE()
  SET(FRAMEWORK_LOG_OUTPUT_ON_RTT "FALSE" CACHE BOOL "When enabled logs will be outputted using the Segger RTT interface instead of using the serial console.")
ENDIF()
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_LOG_OUTPUT_ON_RTT)

SET(FRAMEWORK_TIMER_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the timer")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_TIMER_LOG_ENABLED)

SET(FRAMEWORK_PHY_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the PHY layer")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_PHY_LOG_ENABLED)

SET(FRAMEWORK_ALP_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the ALP component")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_ALP_LOG_ENABLED)

SET(FRAMEWORK_MODEM_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the modem component")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_MODEM_LOG_ENABLED)

SET(FRAMEWORK_MODEM_INTERFACE_USE_DMA "FALSE" CACHE BOOL "Use DMA for UART reception and transmission in modem interface")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_MODEM_INTERFACE_USE_DMA)

SET(FRAMEWORK_MODEM_INTERFACE_USE_INTERRUPT_LINES "FALSE" CACHE BOOL "Enable interrupt lines to wake up modem and MCU for signaling serial communication")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_MODEM_INTERFACE_USE_INTERRUPT_LINES)

SET(FRAMEWORK_MODEM_INTERFACE_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the modem interface component")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_MODEM_INTERFACE_LOG_ENABLED)

SET(FRAMEWORK_POWER_PROFILE_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the power profiling component")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_POWER_PROFILE_LOG_ENABLED)

SET(FRAMEWORK_SCHED_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the scheduler component")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_SCHED_LOG_ENABLED)

SET(FRAMEWORK_DEBUG_ASSERT_MINIMAL "FALSE" CACHE BOOL "Enabling this strips file, line functino and condition information from asserts, to save ROM")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_DEBUG_ASSERT_MINIMAL)

SET(FRAMEWORK_DEBUG_ASSERT_REBOOT "FALSE" CACHE BOOL "When enabled the system will reboot upon assert")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_DEBUG_ASSERT_REBOOT)

SET(FRAMEWORK_DEBUG_ENABLE_SWD "TRUE" CACHE BOOL "Enable the SWD pins and clocks for debug probe usage")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_DEBUG_ENABLE_SWD)

SET(FRAMEWORK_CONSOLE_ENABLED "FALSE" CACHE BOOL "Configures if the serial console is enabled")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_CONSOLE_ENABLED)

SET(FRAMEWORK_SHELL_ENABLED "FALSE" CACHE BOOL "Configures if the shell over console is enabled")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_SHELL_ENABLED)

SET(FRAMEWORK_TIMER_STACK_SIZE "10" CACHE STRING "The number of simultaneous timer events that can be scheduled. Increase this if you have lots of concurrent timers")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_TIMER_STACK_SIZE)

SET(FRAMEWORK_TIMER_RESOLUTION "1MS" CACHE STRING "The frequency of the framework timer. One of '1MS' (1024 ticks per second) or '32K' (32768 ticks per second)")
SET_PROPERTY( CACHE FRAMEWORK_TIMER_RESOLUTION PROPERTY STRINGS "1MS;32K")
FRAMEWORK_HEADER_DEFINE(ID FRAMEWORK_TIMER_RESOLUTION)

SET(FRAMEWORK_AES_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs in the AES algorithms")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_AES_LOG_ENABLED)

SET(FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE "16" CACHE STRING "The max number of trusted node entries which can be used to store security state")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE)

SET(FRAMEWORK_FS_BLOCKDEVICES_COUNT "3" CACHE STRING "The number of block devices. Must be equal or greater than 3")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_BLOCKDEVICES_COUNT)

SET(FRAMEWORK_FS_FILE_COUNT "70" CACHE STRING "The number of files in the filesystem")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_FILE_COUNT)

SET(FRAMEWORK_FS_USER_FILE_COUNT "10" CACHE STRING "The number of user files in the filesystem")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_USER_FILE_COUNT)

SET(FRAMEWORK_FS_PERMANENT_STORAGE_SIZE "2200" CACHE STRING "The total number of bytes which can be stored in the user filesystem")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_PERMANENT_STORAGE_SIZE)

SET(FRAMEWORK_FS_VOLATILE_STORAGE_SIZE "57" CACHE STRING "The total number of bytes which can be stored in the user filesystem")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_FS_VOLATILE_STORAGE_SIZE)

SET(FRAMEWORK_FS_LOG_ENABLED "FALSE" CACHE BOOL "Select whether to enable or disable the generation of logs from the fs")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_FS_LOG_ENABLED)

SET(FRAMEWORK_USE_WATCHDOG "TRUE" CACHE BOOL "Select wheter to enable or disable watchdog")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_USE_WATCHDOG)

SET(FRAMEWORK_USE_POWER_PROFILE "TRUE" CACHE BOOL "Select wheter to enable or disable power profiling")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_USE_POWER_PROFILE)

SET(FRAMEWORK_POWER_PROFILE_RF "TRUE" CACHE BOOL "Select wheter to enable or disable RF power profiling")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_POWER_PROFILE_RF)

IF(NOT FRAMEWORK_USE_POWER_PROFILE)
  LIST(APPEND FRAMEWORK_EXCLUDE_LIBS FRAMEWORK_COMPONENT_power_profiler)
  SET(FRAMEWORK_POWER_PROFILE_RF "FALSE")
ENDIF()

SET(FRAMEWORK_POWER_PROFILE_FILE_ID "50" CACHE STRING "Specifies the file ID of the power profile file")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_POWER_PROFILE_FILE_ID)

#add the non-hal components
ADD_SUBDIRECTORY("components")

#Generate the 'framework_defs.h'
FRAMEWORK_BUILD_SETTINGS_FILE()

SET(FRAMEWORK_SOURCES framework_bootstrap.c)
SET(FRAMEWORK_HEADERS
        inc/aes.h
        inc/bootstrap.h
        inc/errors.h
        inc/link_c.h
        inc/log.h
        inc/ng.h
        inc/random.h
        inc/scheduler.h
        inc/timer.h
        inc/types.h
        inc/fifo.h
        inc/bitmap.h
        inc/debug.h
        inc/console.h
        inc/shell.h
        inc/power_profile_file.h
)

# Assemble the library
# PLATFORM_CHIP_LIBS: Object libraries of individual chips
# PLATFORM: Object library of the platform itself
# FRAMEWORK_OVERRIDE_LIBS: non-hal object libraries that were overridden by the HAL
# FRAMEWORK_LIBS: non-hal object libraries (not overridden)
SET(LIBNAMES "PLATFORM" ${PLATFORM_CHIP_LIBS} ${FRAMEWORK_OVERRIDE_LIBS} ${FRAMEWORK_LIBS} HAL_COMMON)

#Some wizardry to get ADD_LIBRARY to accept everything
FOREACH(libname ${LIBNAMES})
    LIST(APPEND LIBS "$<TARGET_OBJECTS:${libname}>")
ENDFOREACH()
#AND finally add the library
ADD_LIBRARY(framework STATIC ${LIBS} ${FRAMEWORK_SOURCES} ${FRAMEWORK_HEADERS})

GET_PROPERTY(__global_include_dirs GLOBAL PROPERTY GLOBAL_INCLUDE_DIRECTORIES)
GET_PROPERTY(__platform_include_dirs GLOBAL PROPERTY PLATFORM_INCLUDE_DIRECTORIES)
TARGET_INCLUDE_DIRECTORIES("PLATFORM" PUBLIC
    ${__global_include_dirs}
    ${__platform_include_dirs}
)

TARGET_INCLUDE_DIRECTORIES("framework" PUBLIC
    ${__global_include_dirs}
)

GET_PROPERTY(__global_compile_definitions GLOBAL PROPERTY GLOBAL_COMPILE_DEFINITIONS)
TARGET_COMPILE_DEFINITIONS("PLATFORM" PUBLIC ${__global_compile_definitions})
