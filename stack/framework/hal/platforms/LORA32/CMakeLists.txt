
#Check that the correct toolchain for the platform is being used
REQUIRE_TOOLCHAIN(xtensa-esp32-elf)

#Define platform specific options
PLATFORM_PARAM(PLATFORM_MCU "esp32" STRING "The MCU series name of the platform")
SET(JLINK_DEVICE "TODO" CACHE STRING "The device passed to JLinkExe for flashing")
PLATFORM_PARAM(${PLATFORM_PREFIX}_RADIO "none" STRING "The radio chip connected to the board")
#Restrict the number of possible options for the radio option in the usual manner...
SET_PROPERTY(CACHE ${PLATFORM_PREFIX}_RADIO PROPERTY STRINGS "sx127x;none")
PLATFORM_OPTION(PLATFORM_BUILD_BOOTLOADABLE_VERSION "When set builds applications to be deployed using bootloader as well (modified linker script)" FALSE)
PLATFORM_OPTION(PLATFORM_SX127X_USE_PA_BOOST "Use the PA_BOOST output of sx127x chip" FALSE)
PLATFORM_OPTION(PLATFORM_SX127X_USE_RESET_PIN "Platform has access to the RESET pin of sx127x chip" TRUE)
PLATFORM_OPTION(PLATFORM_SX127X_USE_DIO3_PIN "Platform has access to the DIO3 pin of sx127x chip" TRUE)
PLATFORM_OPTION(PLATFORM_SX127X_USE_MANUAL_RXTXSW_PIN "Use the SX1276MB1xAS RXTX pin to switch between RX and TX path" TRUE)

# CONSOLE
# uses USART2,  (PA2 / PA3)
PLATFORM_PARAM(PLATFORM_CONSOLE_UART     "0"      STRING "The UART port used by the console UART configuration."   )
PLATFORM_PARAM(PLATFORM_CONSOLE_BAUDRATE "115200" STRING "The baudrate used by the second console configuration."       )
PLATFORM_PARAM(PLATFORM_CONSOLE_LOCATION "0" STRING "The location.") # TODO remove

PLATFORM_PARAM(PLATFORM_MODEM_INTERFACE_UART     "1"      STRING "The UART channel used by the modem interface UART configuration."   )
PLATFORM_PARAM(PLATFORM_MODEM_INTERFACE_BAUDRATE "115200" STRING "The baudrate used by the modem interface configuration."       )

#Add a 'global' definition for the specific MCU
EXPORT_GLOBAL_COMPILE_DEFINITIONS("-D${PLATFORM_MCU}")

#Make the 'inc' directory available so 'platform.h' can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(inc)

INCLUDE_DIRECTORIES(inc)

#Make the 'binary platform dir' available so the 'platform_defs.h' file
#(Generated by PLATFORM_BUILD_SETTINGS_FILE) can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})


#INSERT_C_FLAGS(AFTER "-gdwarf-2" "-mcpu=cortex-m3" "-mthumb" "-fmessage-length=0" "-mno-sched-prolog" "-fno-builtin" "-ffunction-sections" "-fdata-sections")

#Add platform specific linker flags
INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "--specs=nano.specs" "-Wl,-gc-sections")
INSERT_LINKER_FLAGS(BEFORE LINK_LIBRARIES INSERT "-Wl,--start-group -Wl,--whole-archive")
INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-Wl,--no-whole-archive -lgcc -lc -lnosys -Wl,--end-group")

#SET(LINKER_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/STM32L151XC.ld" CACHE FILEPATH "")
SET(LINKER_FLAGS " " CACHE STRING "")


SET(STANDALONE_FLASH_ORIGIN 0x08000000 CACHE STRING "The offset in flash used for linking the text section when not using bootloader")
SET(STANDALONE_FLASH_LENGTH 256K CACHE STRING "The length of the flash section when not using bootloader")

#Add platform specific linker flags
#INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "--specs=nano.specs" "-Wl,-gc-sections")
#INSERT_LINKER_FLAGS(BEFORE LINK_LIBRARIES INSERT "-Wl,--start-group")
#INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-lgcc -lc -lnosys -Wl,--end-group")

# Add additional definitions to the 'platform_defs.h' file generated by cmake
PLATFORM_HEADER_DEFINE(
    NUMBER
    PLATFORM_CONSOLE_UART
    PLATFORM_CONSOLE_LOCATION
    PLATFORM_CONSOLE_BAUDRATE
    PLATFORM_MODEM_INTERFACE_UART
    PLATFORM_MODEM_INTERFACE_BAUDRATE
    BOOL
    PLATFORM_SX127X_USE_RESET_PIN
    PLATFORM_SX127X_USE_DIO3_PIN
    PLATFORM_SX127X_USE_PA_BOOST
    PLATFORM_SX127X_USE_MANUAL_RXTXSW_PIN
)


#Define the 'platform library'. Every platform must define a 'PLATFORM' object library
ADD_LIBRARY(PLATFORM OBJECT
    platf_main.c
)

#Include the sources for the stm32l1 chip
#ADD_CHIP("stm32l1xx")
#ADD_CHIP("stm32_common")
ADD_CHIP("esp32")

#Include the sources for the radio chip, if needed
IF(NOT ("${${PLATFORM_PREFIX}_RADIO}" STREQUAL "none"))
    ADD_CHIP(${${PLATFORM_PREFIX}_RADIO})
ENDIF()

#Build the 'platform_defs.h' settings file
PLATFORM_BUILD_SETTINGS_FILE()
