#[[
Copyright (c) 2015-2021 University of Antwerp, Aloxy NV.

This file is part of Sub-IoT.
See https://github.com/Sub-IoT/Sub-IoT-Stack for further info.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]

#Check that the correct toolchain for the platform is being used
REQUIRE_TOOLCHAIN(gcc-arm-embedded)

#Define platform specific options
PLATFORM_PARAM(${PLATFORM_PREFIX}_MCU "EZR32LG330F256R60" STRING "The MCU of the Gecko board")
SET(JLINK_DEVICE ${${PLATFORM_PREFIX}_MCU} CACHE STRING "The device passed to JLinkExe for flashing")
PLATFORM_PARAM(${PLATFORM_PREFIX}_RADIO "si4460" STRING "The radio chip connected to the Gecko board")
PLATFORM_OPTION(${PLATFORM_PREFIX}_DEBUGPINS "Enable/Disable Hardware Debug Pins support (see 'hwdebug.h')" TRUE)
#Restrict the number of possible options for the radio option in the usual manner...
SET_PROPERTY(CACHE ${PLATFORM_PREFIX}_RADIO PROPERTY STRINGS "si4460")
PLATFORM_OPTION(PLATFORM_USE_USB_CDC "Enable/Disable the use of CDC (UART Communication using USB" FALSE)
PLATFORM_OPTION(PLATFORM_BUILD_BOOTLOADABLE_VERSION "When set builds applications to be deployed using bootloader as well (modified linker script)" FALSE)


# CONSOLE
# uses UART0, location 1
PLATFORM_PARAM(PLATFORM_CONSOLE_UART     "0"      STRING "The UART channel used by the console UART configuration."   )
PLATFORM_PARAM(PLATFORM_CONSOLE_LOCATION "1"      STRING "The route location used by the console UART configuration." )
PLATFORM_PARAM(PLATFORM_CONSOLE_BAUDRATE "115200" STRING "The baudrate used by the second console configuration."       )

PLATFORM_PARAM(PLATFORM_MODEM_INTERFACE_UART     "1"      STRING "The UART channel used by the modem interface UART configuration."   )
PLATFORM_PARAM(PLATFORM_MODEM_INTERFACE_BAUDRATE "115200" STRING "The baudrate used by the modem interface configuration."       )


PLATFORM_PARAM(PLATFORM_NUM_LEDS "3" STRING "The number of LEDs available.")
PLATFORM_PARAM(PLATFORM_NUM_BUTTONS "1" STRING "The number of buttons available.")

#Add a 'global' definition for the specific MCU
EXPORT_GLOBAL_COMPILE_DEFINITIONS("-D${${PLATFORM_PREFIX}_MCU}")

#Make the 'inc' directory available so 'platform.h' can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(inc)

##testing...
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(config)

INCLUDE_DIRECTORIES(inc
		    Drivers
		    kits/common/drivers
		    kits/common/bsp
			usb/inc/
		    )

#Make the 'binary platform dir' available so the 'platform_defs.h' file
#(Generated by PLATFORM_BUILD_SETTINGS_FILE) can be found
EXPORT_GLOBAL_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#Set platform specific compile options
INSERT_C_FLAGS(AFTER "-gdwarf-2" "-mcpu=cortex-m3" "-mthumb" "-fmessage-length=0" "-mno-sched-prolog" "-fno-builtin" "-ffunction-sections" "-fdata-sections")

#Add platform specific linker flags
INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "--specs=nano.specs" "-Wl,-gc-sections")
INSERT_LINKER_FLAGS(BEFORE LINK_LIBRARIES INSERT "-Wl,--start-group")
INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-lgcc -lc -lnosys -Wl,--end-group")

# Add additional definitions to the 'platform_defs.h' file generated by cmake
PLATFORM_HEADER_DEFINE(
  NUMBER PLATFORM_CONSOLE_UART
         PLATFORM_CONSOLE_LOCATION
         PLATFORM_CONSOLE_BAUDRATE
         PLATFORM_MODEM_INTERFACE_UART
         PLATFORM_MODEM_INTERFACE_BAUDRATE
         PLATFORM_NUM_BUTTONS
         PLATFORM_NUM_LEDS
  BOOL   ${PLATFORM_PREFIX}_DEBUGPINS
         PLATFORM_USE_USB_CDC
)

#Define the 'platform library'. Every platform must define a 'PLATFORM' object library
ADD_LIBRARY(PLATFORM OBJECT
    platf_main.c
    platf_leds.c
    platf_button.c
    platf_debug.c
    platf_usb.c
    #platf_usb_descriptors.c
    libc_overrides.c
    inc/button.h
    kits/common/drivers/udelay.c
    kits/common/drivers/cdc.c
    kits/common/bsp/bsp_bcc.c
    kits/common/bsp/bsp_stk.c
    kits/common/bsp/bsp_trace.c
)

#Include the sources for the EZR32LG330 chip
ADD_CHIP("ezr32lg")

#Include the sources for the radio chip, if needed
IF(NOT ("${${PLATFORM_PREFIX}_RADIO}" STREQUAL "none"))
    ADD_CHIP(${${PLATFORM_PREFIX}_RADIO})
ENDIF()

#Build the 'platform_defs.h' settings file
PLATFORM_BUILD_SETTINGS_FILE()
